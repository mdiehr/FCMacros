#!/usr/bin/env python
# coding: utf-8

# Macro by Mark1D
# Calculates mass & moment of inertia for selected parts or all parts in the document

__Name__ = 'YoyoInfo'
__Comment__ = 'Yoyo stuff for making yoyos'
__Author__ = 'Mark1D'
__Version__ = '3.0.1'

import FreeCAD
import FreeCAD as app
import FreeCADGui as gui
from FreeCAD import Units

from PySide import QtGui, QtCore
from PySide.QtGui import QApplication, QDialog, QMainWindow


# Preferences

# FreeCAD: Tools -> Edit Parameters, 2nd parameter of .GetX sets the default
MACRO_SETTINGS  = 'User parameter:BaseApp/Preferences/Macros/' + __Name__


GUI_FONT_SIZE = app.ParamGet('User parameter:BaseApp/Preferences/Editor').GetInt('FontSize', 10)
GUI_ICON_SIZE = app.ParamGet('User parameter:BaseApp/Preferences/General').GetInt('ToolbarIconSize', 24)



g_main_window = gui.getMainWindow()
g_font = g_main_window.font()
g_font.setPointSize(GUI_FONT_SIZE)
g_font_metrics = QtGui.QFontMetrics(g_font)
g_str_width = g_font_metrics.horizontalAdvance('_0_000e+00_')
g_icon_size = QtCore.QSize(GUI_ICON_SIZE, GUI_ICON_SIZE)
g_sel_user = []    # the user list of selected objects
g_sel = []    # the valid list of selected objects


class YoyoDock(QtGui.QDockWidget):

    def __init__(self):
        super().__init__()
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose, True)    # free memory
        self.setLocale(QtCore.QLocale.English)
        self.child = YoyoWidget(self)
        self.setWidget(self.child)
        g_main_window.addDockWidget(QtCore.Qt.RightDockWidgetArea, self)



class YoyoWidget(QtGui.QWidget):
    """This is the widget which does almost all of the work.
    Widgets don't have close boxes, so closing is dealt with in
    CenterofmassWindow.
    """
    def __init__(self, parent):
        super().__init__(parent)
        self.setObjectName(__Name__)
        parent.setWindowTitle(__Name__ + ' ' + __Version__)
        parent.setFont(g_font)
        self.doc = app.activeDocument()
        self.init_UI()
        self.on_push_button_recalculate()

    def init_UI(self):
        """Lay out the interactive elements"""
        layout = QtGui.QVBoxLayout(self)

        # Recalculate button
        button_recalculate = QtGui.QPushButton('Recalculate')
        button_recalculate.setToolTip('Recalculate Yoyo MMOI')
        button_recalculate.setIcon(QtGui.QIcon(':/icons/view-refresh.svg'))
        button_recalculate.setIconSize(g_icon_size)
        button_recalculate.clicked.connect(self.on_push_button_recalculate)

        # Parts dropdown
        self.create_parts_dropdown()

        # Calculated totals

        label_mass = QtGui.QLabel('Mass')
        self.resultMass = self.create_label_line('assembled mass')
        label_half = QtGui.QLabel('Half Mass')
        self.resultHalf = self.create_label_line('half mass')
        label_mmoi = QtGui.QLabel('MMOI')
        self.resultMMOI = self.create_label_line('MMOI')

        layout_total = QtGui.QGridLayout()

        layout_total.addWidget(label_mass, 0, 0)
        layout_total.addWidget(self.resultMass, 0, 2)

        layout_total.addWidget(label_half, 1, 0)
        layout_total.addWidget(self.resultHalf, 1, 2)

        layout_total.addWidget(label_mmoi, 2, 0)
        layout_total.addWidget(self.resultMMOI, 2, 2)

        self.box_totals = QtGui.QGroupBox(self.doc.Name)
        self.box_totals.setLayout(layout_total)

        layout.addWidget(self.box_totals)
        layout.addWidget(button_recalculate)
        layout.addWidget(self.combo_parts)
        layout.addStretch()


        qApp = QtGui.QApplication.instance()
        qApp.focusChanged.connect(self.on_focusChanged)    # emits on each focus change in FreeCAD

    def create_parts_dropdown(self):
        massOfPads = 0.30
        massOfBearing = 2.10
        massOfSEUltraLites = 2.50
        massOfSELego = 2.73
        massOfSESpikes = 3.20
        massOfSEBrassMarkmonts = 6.68
        massOfTopyoBearingAxle = 2.50
        massOfM85BearingAxle = 1.00

        self.parts_dict = {
            'C Bearing': massOfPads + massOfTopyoBearingAxle,
            'MR85 Bearing': massOfPads + massOfM85BearingAxle,
            'Side Effect - Ultra Lights': massOfPads + massOfBearing + massOfSEUltraLites,
            'Side Effect - Legos': massOfPads + massOfBearing + massOfSELego,
            'Side Effect - Spikes': massOfPads + massOfBearing + massOfSESpikes,
        }
        self.parts_mass = self.parts_dict.get('C Bearing')
        self.combo_parts = QtGui.QComboBox(toolTip='Select the parts for the bearing/pads')
        for key in self.parts_dict:
            self.combo_parts.addItem(key)
        self.combo_parts.currentIndexChanged.connect(self.on_parts_dropdown_changed)
        return self.combo_parts

    def on_parts_dropdown_changed(self, new_index):
        curr_text = self.combo_parts.currentText()
        self.parts_mass = self.parts_dict.get(curr_text)

    def create_label_line(self, name):
        line = QtGui.QLineEdit(self)
        line.setObjectName(name)
        line.setReadOnly(True)
        return line

    def on_focusChanged(self):
        # self.box_totals.setTitle(self.doc.Name)
        pass


    def on_push_button_recalculate(self):
        # Set doc name
        self.doc = app.activeDocument()
        self.box_totals.setTitle(self.doc.Name)

        # Instance of the class object
        yoyoPart = YoyoPartData()

        # Runs for a selection or for all objects
        if FreeCADGui.Selection.getSelection():
            self.processList(yoyoPart, FreeCADGui.Selection.getSelection())
        else:
            self.processList(yoyoPart, App.ActiveDocument.Objects)

        # Outputs
        parts = self.parts_mass
        assembledMass = yoyoPart.yoyoMass * 2 + self.parts_mass
        self.resultHalf.setText('{:.6} g'.format(yoyoPart.yoyoMass))
        self.resultMass.setText('{:.6} g'.format(assembledMass))
        self.resultMMOI.setText('{:.6}'.format(yoyoPart.yoyoInertiaX1))
        pass


    # Looks at all the objects in the document
    def processList(self, yoyo, objList):
        for obj in filter(isPartSolid, objList):
            yoyo.addPart(obj)



class YoyoPartData:
    yoyoMass = 0.0

    yoyoInertiaX1 = 0.0
    yoyoInertiaY1 = 0.0
    yoyoInertiaZ1 = 0.0
    yoyoInertiaX2 = 0.0
    yoyoInertiaY2 = 0.0
    yoyoInertiaZ2 = 0.0
    yoyoInertiaX3 = 0.0
    yoyoInertiaY3 = 0.0
    yoyoInertiaZ3 = 0.0

    unitMass = 1.00 # gram
    unitLength = 1.00 # mm
    unitVolume = 1.00 # mm3

    massOfPads = 0.30
    massOfBearing = 2.10
    massOfSEUltraLites = 2.50
    massOfSELego = 2.73
    massOfSESpikes = 3.20
    massOfSEBrassMarkmonts = 6.68
    massOfTopyoBearingAxle = 2.50
    massOfM85BearingAxle = 1.00
    # massOfBearingPadsAxle = massOfPads + massOfBearing + massOfSEUltraLites
    # massOfBearingPadsAxle = massOfPads + massOfBearing + massOfSESpikes
    massOfBearingPadsAxle = massOfPads + massOfTopyoBearingAxle
    # massOfBearingPadsAxle = massOfPads + massOfM85BearingAxle
    # massOfBearingPadsAxle = 0.9

    formatString = "{:10.2f}"

    def printData(self):
        assembledMass = self.yoyoMass * 2 + self.massOfBearingPadsAxle
        App.Console.PrintMessage("\n============ ASSEMBLED YOYO ============\n"
                                +"     Half:" + self.formatString.format(self.yoyoMass)+" g\n"
                                +"Assembled:" + self.formatString.format(assembledMass)+" g\n"
                                +"     MMoI:" + self.formatString.format(self.yoyoInertiaX1)  +","
                                    + self.formatString.format(self.yoyoInertiaY1)  +","
                                    + self.formatString.format(self.yoyoInertiaZ1)  +"\n"
                                +"          " + self.formatString.format(self.yoyoInertiaX2)  +","
                                    + self.formatString.format(self.yoyoInertiaY2)  +","
                                    + self.formatString.format(self.yoyoInertiaZ2)  +"\n"
                                +"          " + self.formatString.format(self.yoyoInertiaX3)  +","
                                    + self.formatString.format(self.yoyoInertiaY3)  +","
                                    + self.formatString.format(self.yoyoInertiaZ3)  +"\n"
            )

    def addPart(self, part):
        App.Console.PrintMessage(part.Label + " ("+part.FullName+")\n")
        partDensity = 0.0
        try:
            labelParts = part.Label.split()
            labelDensity = labelParts[len(labelParts)-1]
            partDensity = float(labelDensity)
        except:
            App.Console.PrintMessage("Couldn't read density from: '"+part.Label+"', skipping this part\n")
            return

        partVolume = part.Shape.Volume
        partMass = partVolume * partDensity / 1000.0
        self.yoyoMass = self.yoyoMass + partMass

        App.Console.PrintMessage("\tDensity: "+self.formatString.format(partDensity)+"\n")
        App.Console.PrintMessage("\tMass:    "+self.formatString.format(partMass)+" g\n")

        self.addMOI(part, partDensity)

    def addMOI(self, part, partDensity):
        m = part.Shape.Solids[0].MatrixOfInertia
        MatrixX1 = (m.A[0])
        MatrixY1 = (m.A[1])
        MatrixZ1 = (m.A[2])

        MatrixX2 = (m.A[4])
        MatrixY2 = (m.A[5])
        MatrixZ2 = (m.A[6])

        MatrixX3 = (m.A[8])
        MatrixY3 = (m.A[9])
        MatrixZ3 = (m.A[10])

        multiplicand = self.unitLength**5 * partDensity * self.unitMass * (1.0 / (self.unitVolume * 1000.0));

        mmoiX1 = (MatrixX1 * multiplicand)
        mmoiY1 = (MatrixY1 * multiplicand)
        mmoiZ1 = (MatrixZ1 * multiplicand)
        mmoiX2 = (MatrixX2 * multiplicand)
        mmoiY2 = (MatrixY2 * multiplicand)
        mmoiZ2 = (MatrixZ2 * multiplicand)
        mmoiX3 = (MatrixX3 * multiplicand)
        mmoiY3 = (MatrixY3 * multiplicand)
        mmoiZ3 = (MatrixZ3 * multiplicand)

        self.yoyoInertiaX1 += mmoiX1
        self.yoyoInertiaY1 += mmoiY1
        self.yoyoInertiaZ1 += mmoiZ1
        self.yoyoInertiaX2 += mmoiX2
        self.yoyoInertiaY2 += mmoiY2
        self.yoyoInertiaZ2 += mmoiZ2
        self.yoyoInertiaX3 += mmoiX3
        self.yoyoInertiaY3 += mmoiY3
        self.yoyoInertiaZ3 += mmoiZ3


# Filter to say if the part type should be included in the calculations
def isPartSolid(part):
    if "Part::" in part.TypeId or "PartDesign::" in part.TypeId:
        # App.Console.PrintMessage('Checking part ' + part.TypeId + ' ' + part.Label + ' ' + part.FullName + '\n')
        if part.Shape:
            if part.Shape.Volume:
                return part.Shape.Volume > 0
    return False;

def error_message(msg):
    app.Console.PrintError(msg + '\n')
    QtGui.QMessageBox.critical(g_main_window, 'Error', msg)

if __name__ == '__main__':
    if not app.activeDocument():
        error_message('Open a document first.')
    else:
        print('Loading ' + __Name__ + ' ' + __Version__ + ' ...')
        gui.updateGui()
        myWidget = YoyoDock()
